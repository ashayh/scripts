#!/usr/bin/env ruby
#
# Multi-threaded command execution over SSH
#
# Jean-Francois Theroux <failshell@gmail.com>
#
# License: GPLv2

require 'net/ssh'
require 'trollop'
require 'peach'
require 'json'
require 'colorize'
require 'netaddr'

# Credentials are put here, instead of CLI options, so that
# the password doesn't show up when you run 'ps'
user = 'user'
password = 'password'

# CLI help menu
opts = Trollop::options do
  opt :command, 'Command to run', :required => true, :type => String
  opt :file, 'Hosts list file', :required => false, :type => String
  opt :subnet, 'Specify a subnet', :type => String
  opt :verbose, 'Verbose mode'
end

hosts = []

if opts.file
  File.open(opts.file).each_line { |l| hosts << l.gsub("\n", '') }
elsif opts.subnet
   cidr =  NetAddr::CIDR.create(opts.subnet)
   hosts = cidr.enumerate
else
   abort("Must specify host list or subnet")
end

# multithreaded command execution
results = {}
hosts.peach do |host|
  begin
    Net::SSH.start(host, user, :password => password) do |ssh|
      output = []
      ssh.exec!(opts.command).each_line do |out|
        output << out.gsub("\n", '')
      end
      results[host] = output
    end
  rescue Errno::ECONNREFUSED => e
    STDERR.puts "#{host}: #{e.to_s}".yellow
  rescue Net::SSH::AuthenticationFailed
    STDERR.puts "#{host}: Invalid user".yellow
  rescue SocketError => e
    STDERR.puts "#{host}: #{e.to_s}".yellow
  rescue Errno::ETIMEDOUT => e
    STDERR.puts "#{host}: #{e.to_s}".yellow
  rescue Errno::EHOSTUNREACH => e
    STDERR.puts "#{host}: #{e.to_s}".yellow
  end
end
if opts.verbose
  if results == {}
    STDERR.puts 'No results... Doh!'.red
  else
    puts JSON.pretty_generate(results).light_green
  end
end
